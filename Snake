<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"></name>
    <title>Snake by Filip</title>
    <style>
        body {
            background: #94DFDB;
            text-align: center;
         }
         canvas {
        border: 10px solid #3cea21;
        }

        h1 { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-weight: bold;
            margin-top: 0;
            font-size: 3em;
            letter-spacing: -10px;        
    }
    
    h1 strong {
        font-size: 1.35em;
        display: inline-block;
        margin: 0 2em;
    }

    </style>
    
</head>

<body>

    <canvas width="600" height="600"></canvas>

    <h1> 0 </h1>

    <script>
        // listeners
        document.addEventListener('keydown', keyPush)

        // canvas
        const canvas = document.querySelector('canvas');
        const title = document.querySelector('h1');
        const ctx = canvas.getContext('2d');

         //game

        let gameIsRunning = true;
        
        const fps = 10;       
        const tileSize = 50;
        const tileCountX = canvas.width / tileSize;
        const tileCountY = canvas.height / tileSize;

        let score = 0;
           

        //player
        
        let snakeSpeed = tileSize;
        let snakePosX = 0
        let snakePosY = canvas.height / 2;
        

        let velocityX = 1;
        let velocityY = 0;

        let tail = [];
        let snakeLength = 4;

        // FOOD
        let foodPosX = 0;
        let foodPosY = 0;

       
        
        //loop
        function gameloop() {
            if (gameIsRunning) {

            moveStuff()

            drawStuff()
            
            setTimeout(gameloop, 1000 / fps);
            }

        }

        resetFood();
        gameloop();
        
        // move everything
    
        function moveStuff() {
      
            snakePosX += snakeSpeed * velocityX;
            snakePosY += snakeSpeed * velocityY;


            // wall collision
            if (snakePosX > (canvas.width - tileSize)) {
                snakePosX = 0;
        }
            if (snakePosX < 0) {
                snakePosX = canvas.width;
        }
            if (snakePosY > (canvas.height - tileSize)) {
                snakePosY = 0;
        }
            if (snakePosY < 0) {
                snakePosY = canvas.height;
        }


        // game over (crash into myself)
        tail.forEach( snakePart => {
            if (snakePosX === snakePart.x && snakePosY === snakePart.y) {
                gameOver()
            }
        });

         // tail 
         tail.push({ x: snakePosX, y: snakePosY }); 

         // forget earliest parts of snake
         tail = tail.slice(-1* snakeLength);

        // food colision    
        if (snakePosX === foodPosX && snakePosY === foodPosY ) {
            title.textContent = ++score;
            snakeLength++;
            resetFood();
            
        }
    }

    
        

        // DRAW EVERYTHING
        function drawStuff () {
           
            //background

            rectangle("#94DFDB", 0, 0, canvas.width, canvas.height);

           //grid

           drawGrid()

           //food

            rectangle('#DDB372', foodPosX, foodPosY, tileSize, tileSize);

            //tail
            tail.forEach((snakePart) =>
                rectangle('#486A47', snakePart.x, snakePart.y, tileSize, tileSize)
            );

           //snake

            rectangle("black", snakePosX, snakePosY, tileSize, tileSize);

           
        }

        // Draw rectangle

        function rectangle(color, x, y, width, height) {
            ctx.fillStyle = color;
            ctx.fillRect(x, y, width, height);

        }

        // randomize food position
        function resetFood() {
        //GAME OVER  (NOWHERE TO GO)
            if( snakeLength === tileCountX * tileCountY) {
                gameOver()
            }

            foodPosX = Math.floor(Math.random() * tileCountX) * tileSize;
            foodPosY = Math.floor(Math.random() * tileCountY) * tileSize;

            //don't spawn food on snakes head
            if( foodPosX === snakePosX && foodPosY === snakePosY ) {
                resetfood();
            }
            //don't spawn on body
            if( tail.some(
            (snakePart) => snakePart.x === foodPosX && snakePart.y === foodPosY)) 
            { resetFood();
            }
            

        }

        //game over 
         function gameOver() {
            title.innerHTML = ` <strong> * ${score} * </strong> `  ;
            gameIsRunning = false;
         }
        
        /*
        KEYBOARD
        */
        function keyPush(event) {
            switch(event.key) {
                    case "ArrowUp":
                        if (velocityY !== 1) {
                        velocityX = 0;
                        velocityY = -1;
                        }
                    break;
                    case "ArrowDown":
                        if(velocityY !== -1){
                        velocityX = 0;
                        velocityY = 1;
                        }
                    break;
                    case "ArrowLeft":
                        if(velocityX !== 1) {
                        velocityX = -1;
                        velocityY = 0;
                        }
                    break;
                    case "ArrowRight":
                        if(velocityX !== -1) {
                        velocityX = 1;
                        velocityY = 0;
                        }
                    break;
                    default:
                        // restart game
                        if( ! gameIsRunning ) location.reload(); 
                        break;
            }
        }
        
        //grid

        function drawGrid() {
            for ( let i = 0; i < tileCountX; i++) {
                for ( let j = 0; j < tileCountY; j++) {
                rectangle(
                    '#fff',
                    tileSize * i,
                    tileSize * j,
                    tileSize - 1,
                    tileSize - 1);
            }
        }
        }
    </script>

</body>

</html>
